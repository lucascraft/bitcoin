/**
 */
package net.sf.smbt.btc.mtgox.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.btc.mtgox.util.MtgoxAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MtgoxItemProviderAdapterFactory extends MtgoxAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MtgoxItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.MTGox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MTGoxItemProvider mtGoxItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.MTGox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMTGoxAdapter() {
		if (mtGoxItemProvider == null) {
			mtGoxItemProvider = new MTGoxItemProvider(this);
		}

		return mtGoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.MTGoxCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MTGoxCmdItemProvider mtGoxCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.MTGoxCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMTGoxCmdAdapter() {
		if (mtGoxCmdItemProvider == null) {
			mtGoxCmdItemProvider = new MTGoxCmdItemProvider(this);
		}

		return mtGoxCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.CompactValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompactValueItemProvider compactValueItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.CompactValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompactValueAdapter() {
		if (compactValueItemProvider == null) {
			compactValueItemProvider = new CompactValueItemProvider(this);
		}

		return compactValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.Fundamentals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FundamentalsItemProvider fundamentalsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.Fundamentals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFundamentalsAdapter() {
		if (fundamentalsItemProvider == null) {
			fundamentalsItemProvider = new FundamentalsItemProvider(this);
		}

		return fundamentalsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.FetchValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FetchValueItemProvider fetchValueItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.FetchValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFetchValueAdapter() {
		if (fetchValueItemProvider == null) {
			fetchValueItemProvider = new FetchValueItemProvider(this);
		}

		return fetchValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.DepthValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DepthValueItemProvider depthValueItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.DepthValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDepthValueAdapter() {
		if (depthValueItemProvider == null) {
			depthValueItemProvider = new DepthValueItemProvider(this);
		}

		return depthValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.Wallet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WalletItemProvider walletItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.Wallet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWalletAdapter() {
		if (walletItemProvider == null) {
			walletItemProvider = new WalletItemProvider(this);
		}

		return walletItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.WalletRecord} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WalletRecordItemProvider walletRecordItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.WalletRecord}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWalletRecordAdapter() {
		if (walletRecordItemProvider == null) {
			walletRecordItemProvider = new WalletRecordItemProvider(this);
		}

		return walletRecordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.Order} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrderItemProvider orderItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.Order}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrderAdapter() {
		if (orderItemProvider == null) {
			orderItemProvider = new OrderItemProvider(this);
		}

		return orderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.CurrencyWalletData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CurrencyWalletDataItemProvider currencyWalletDataItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.CurrencyWalletData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCurrencyWalletDataAdapter() {
		if (currencyWalletDataItemProvider == null) {
			currencyWalletDataItemProvider = new CurrencyWalletDataItemProvider(this);
		}

		return currencyWalletDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.mtgox.WithdrawInfo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WithdrawInfoItemProvider withdrawInfoItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.mtgox.WithdrawInfo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWithdrawInfoAdapter() {
		if (withdrawInfoItemProvider == null) {
			withdrawInfoItemProvider = new WithdrawInfoItemProvider(this);
		}

		return withdrawInfoItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mtGoxItemProvider != null) mtGoxItemProvider.dispose();
		if (mtGoxCmdItemProvider != null) mtGoxCmdItemProvider.dispose();
		if (compactValueItemProvider != null) compactValueItemProvider.dispose();
		if (fundamentalsItemProvider != null) fundamentalsItemProvider.dispose();
		if (fetchValueItemProvider != null) fetchValueItemProvider.dispose();
		if (depthValueItemProvider != null) depthValueItemProvider.dispose();
		if (walletItemProvider != null) walletItemProvider.dispose();
		if (walletRecordItemProvider != null) walletRecordItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (orderItemProvider != null) orderItemProvider.dispose();
		if (currencyWalletDataItemProvider != null) currencyWalletDataItemProvider.dispose();
		if (withdrawInfoItemProvider != null) withdrawInfoItemProvider.dispose();
	}

}
