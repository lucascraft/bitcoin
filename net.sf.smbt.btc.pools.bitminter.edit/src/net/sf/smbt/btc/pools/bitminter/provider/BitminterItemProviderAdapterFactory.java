/**
 */
package net.sf.smbt.btc.pools.bitminter.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.btc.pools.bitminter.util.BitminterAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BitminterItemProviderAdapterFactory extends BitminterAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BitminterItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.BitMinterCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BitMinterCmdItemProvider bitMinterCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.BitMinterCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBitMinterCmdAdapter() {
		if (bitMinterCmdItemProvider == null) {
			bitMinterCmdItemProvider = new BitMinterCmdItemProvider(this);
		}

		return bitMinterCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.BitMinterConfig} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BitMinterConfigItemProvider bitMinterConfigItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.BitMinterConfig}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBitMinterConfigAdapter() {
		if (bitMinterConfigItemProvider == null) {
			bitMinterConfigItemProvider = new BitMinterConfigItemProvider(this);
		}

		return bitMinterConfigItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.PoolStats} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PoolStatsItemProvider poolStatsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.PoolStats}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPoolStatsAdapter() {
		if (poolStatsItemProvider == null) {
			poolStatsItemProvider = new PoolStatsItemProvider(this);
		}

		return poolStatsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.PoolRound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PoolRoundItemProvider poolRoundItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.PoolRound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPoolRoundAdapter() {
		if (poolRoundItemProvider == null) {
			poolRoundItemProvider = new PoolRoundItemProvider(this);
		}

		return poolRoundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.Chain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChainItemProvider chainItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.Chain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChainAdapter() {
		if (chainItemProvider == null) {
			chainItemProvider = new ChainItemProvider(this);
		}

		return chainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.UserData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserDataItemProvider userDataItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.UserData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserDataAdapter() {
		if (userDataItemProvider == null) {
			userDataItemProvider = new UserDataItemProvider(this);
		}

		return userDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.RoundStart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoundStartItemProvider roundStartItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.RoundStart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoundStartAdapter() {
		if (roundStartItemProvider == null) {
			roundStartItemProvider = new RoundStartItemProvider(this);
		}

		return roundStartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.Shift} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShiftItemProvider shiftItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.Shift}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShiftAdapter() {
		if (shiftItemProvider == null) {
			shiftItemProvider = new ShiftItemProvider(this);
		}

		return shiftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.Balance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BalanceItemProvider balanceItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.Balance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBalanceAdapter() {
		if (balanceItemProvider == null) {
			balanceItemProvider = new BalanceItemProvider(this);
		}

		return balanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.Worker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkerItemProvider workerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.Worker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkerAdapter() {
		if (workerItemProvider == null) {
			workerItemProvider = new WorkerItemProvider(this);
		}

		return workerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.Work} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkItemProvider workItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.Work}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkAdapter() {
		if (workItemProvider == null) {
			workItemProvider = new WorkItemProvider(this);
		}

		return workItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.DatedRate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatedRateItemProvider datedRateItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.DatedRate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatedRateAdapter() {
		if (datedRateItemProvider == null) {
			datedRateItemProvider = new DatedRateItemProvider(this);
		}

		return datedRateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.DatedHashRate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatedHashRateItemProvider datedHashRateItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.DatedHashRate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatedHashRateAdapter() {
		if (datedHashRateItemProvider == null) {
			datedHashRateItemProvider = new DatedHashRateItemProvider(this);
		}

		return datedHashRateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.UserHashRate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserHashRateItemProvider userHashRateItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.UserHashRate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserHashRateAdapter() {
		if (userHashRateItemProvider == null) {
			userHashRateItemProvider = new UserHashRateItemProvider(this);
		}

		return userHashRateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.btc.pools.bitminter.RoundHashRate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoundHashRateItemProvider roundHashRateItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.btc.pools.bitminter.RoundHashRate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoundHashRateAdapter() {
		if (roundHashRateItemProvider == null) {
			roundHashRateItemProvider = new RoundHashRateItemProvider(this);
		}

		return roundHashRateItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (bitMinterCmdItemProvider != null) bitMinterCmdItemProvider.dispose();
		if (bitMinterConfigItemProvider != null) bitMinterConfigItemProvider.dispose();
		if (poolStatsItemProvider != null) poolStatsItemProvider.dispose();
		if (poolRoundItemProvider != null) poolRoundItemProvider.dispose();
		if (chainItemProvider != null) chainItemProvider.dispose();
		if (userDataItemProvider != null) userDataItemProvider.dispose();
		if (roundStartItemProvider != null) roundStartItemProvider.dispose();
		if (shiftItemProvider != null) shiftItemProvider.dispose();
		if (balanceItemProvider != null) balanceItemProvider.dispose();
		if (workerItemProvider != null) workerItemProvider.dispose();
		if (workItemProvider != null) workItemProvider.dispose();
		if (datedRateItemProvider != null) datedRateItemProvider.dispose();
		if (datedHashRateItemProvider != null) datedHashRateItemProvider.dispose();
		if (userHashRateItemProvider != null) userHashRateItemProvider.dispose();
		if (roundHashRateItemProvider != null) roundHashRateItemProvider.dispose();
	}

}
